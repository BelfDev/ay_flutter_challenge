import 'package:ay_flutter_challenge/blocs/blocs.dart';
import 'package:ay_flutter_challenge/data/models/contact.dart';
import 'package:ay_flutter_challenge/data/repositories/contact_repository.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';

class _MockContactRepository extends Mock implements ContactRepository {}

void main() {
  _MockContactRepository contactRepository;
  SearchBloc searchBloc;

  setUp(() {
    contactRepository = _MockContactRepository();
    searchBloc = SearchBloc(contactRepository);
  });

  tearDown(() {
    contactRepository = null;
    searchBloc = null;
  });

  // TODO: Understand how to expect emissions generated by [StateQueue]'s inner run bloc and complete test cases
  group('SearchBloc', () {
    test('initial state is SearchState.initial', () {
      expect(searchBloc.value, SearchState<Contact>.initial());
    });

    test('.searchContacts() emits SearchState.loading', () {});

    test('.searchContacts() emits SearchState.success with search history',
        () {});

    test(
        '.searchContacts() emits SearchState.success with search matching contacts',
        () {});

    test('.searchContacts() emits SearchState.error', () {});

    test('.addToContactHistory() adds new contact to history', () {
      final newContact = Contact(firstName: 'Pedro', lastName: 'Belfort');

      when(contactRepository.fetchContactSearchHistory()).thenAnswer((_) => [
            Contact(firstName: 'Joe', lastName: 'Doe'),
            Contact(firstName: 'Mary', lastName: 'Doe')
          ]);

      final successful = searchBloc.addToContactHistory(newContact);

      expect(successful, true);
    });

    test(
        '.addToContactHistory() does not add if the contact is already contained in history',
        () {
      final newContact = Contact(firstName: 'Pedro', lastName: 'Belfort');

      when(contactRepository.fetchContactSearchHistory()).thenAnswer((_) => [
            Contact(firstName: 'Pedro', lastName: 'Belfort'),
            Contact(firstName: 'Mary', lastName: 'Doe')
          ]);

      final successful = searchBloc.addToContactHistory(newContact);

      expect(successful, false);
    });
  });
}
